{"version":3,"file":"static/js/65.e81e551a.chunk.js","mappings":"oQAmCA,EAhCmB,SAAC,GAAgB,IAAdA,EAAa,EAAbA,OACpB,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KAEMC,EAAgBF,EAAaG,IAAI,WAAa,GAWpD,OACE,iBAAMC,SANa,SAAAC,GACnBA,EAAEC,iBACFR,EAAOI,EACR,EAGC,UACE,UAAC,KAAD,YACE,SAAC,KAAD,CACEK,KAAK,QACLC,KAAK,OACLC,SAfa,SAAC,GAA2B,IAAfC,EAAc,EAAxBC,OAAUD,MACxBT,EAARS,EAAwB,CAAEE,OAAQF,GAA2B,CAAC,EAC/D,EAcOG,GAAG,eACHH,MAAOR,EACPY,YAAY,cACZC,UAAQ,KAEV,SAAC,KAAD,CAAQP,KAAK,SAAb,wBAIP,E,SC7BKQ,EAAS,IAAIC,gBAAgB,CACjCC,cAAe,QACfC,SAAU,QACVC,KAAM,MAGKC,EAAkB,mCAAG,WAAMC,GAAN,0FACTC,EAAAA,EAAAA,GAAM,GAAD,OATb,4CASa,YAAgBP,EAAhB,kBAAgCM,GAAe,CACzEE,QAAS,CACPC,OAAQ,mBACRC,cACE,gOAL0B,uBACxBC,EADwB,EACxBA,KADwB,kBASzBA,GATyB,2CAAH,sDCkD/B,EAnDmB,WACjB,OAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAAwCJ,EAAAA,EAAAA,UAAS,MAAjD,eAAOK,EAAP,KAAqBC,EAArB,KACA,GAAsCN,EAAAA,EAAAA,UAAS,IAA/C,eAAON,EAAP,KAAoBa,EAApB,KAEA,GAAuBpC,EAAAA,EAAAA,MACjBqC,GADN,eAC2BjC,IAAI,UACzBkC,GAAMC,EAAAA,EAAAA,QAAOF,GAMbG,GAAeC,EAAAA,EAAAA,aAAW,mCAAC,WAAMC,GAAN,uFAE7BT,GAAa,GACbE,EAAgB,MAHa,SAIVb,EAAmBoB,GAJT,OAIvBd,EAJuB,OAK7BO,EAAgBP,EAAKe,SALQ,gDAO7BZ,EAAS,KAAMa,SAAShB,MAPK,yBAS7BK,GAAa,GATgB,4EAAD,sDAW7B,IAWH,OARAY,EAAAA,EAAAA,YAAU,WACRtB,GAAeiB,EAAajB,EAC7B,GAAE,CAACiB,EAAcjB,KAElBsB,EAAAA,EAAAA,YAAU,WACRP,EAAIQ,SAAWN,EAAaF,EAAIQ,QACjC,GAAE,CAACN,KAGF,UAAC,KAAD,YACE,SAAC,EAAD,CAAYzC,OA5BD,SAAAY,GACbyB,EAAezB,EAChB,IA2BIqB,GAAa,aACbF,GAASA,EAAMiB,QACfb,IACGA,EAAac,QAGb,SAACC,EAAA,EAAD,CAAYrB,KAAMM,KAFlB,6CAMT,C","sources":["components/SearchForm.jsx","api/serchMoviesByQuery.js","pages/MoviesPage.jsx"],"sourcesContent":["import { useSearchParams } from 'react-router-dom';\nimport { Button, FormWrap, Input } from './Parts.styled';\n\nconst SearchForm = ({ submit }) => {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const queryByParams = searchParams.get('search') || '';\n\n  const handleChange = ({ target: { value } }) => {\n    value ? setSearchParams({ search: value }) : setSearchParams({});\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    submit(queryByParams);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <FormWrap>\n        <Input\n          name=\"title\"\n          type=\"text\"\n          onChange={handleChange}\n          id=\"searchMovies\"\n          value={queryByParams}\n          placeholder=\"I search...\"\n          required\n        />\n        <Button type=\"submit\">Search</Button>\n      </FormWrap>\n    </form>\n  );\n};\n\nexport default SearchForm;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/search/movie';\n\nconst params = new URLSearchParams({\n  include_adult: 'false',\n  language: 'en-US',\n  page: '1',\n});\n\nexport const serchMoviesByQuery = async searchQuery => {\n  const { data } = await axios(`${BASE_URL}?${params}&query=${searchQuery}`, {\n    headers: {\n      accept: 'application/json',\n      Authorization:\n        'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJlZDc1NDMxMGIwZjVmNTc4OTY2NTlkN2U3YjNiM2M5OSIsInN1YiI6IjY1MTZjZTQxOTY3Y2M3MDBlMjljNDE1ZiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.gX7IIO1mra9GDRtn9YVtq6jk4lp-mVqNo-qkDjk4fA0',\n    },\n  });\n\n  return data;\n};\n","import React, { useRef } from 'react';\nimport { useEffect, useState, useCallback } from 'react';\n\nimport MoviesList from 'components/MoviesList';\nimport SearchForm from 'components/SearchForm';\nimport { serchMoviesByQuery } from 'api/serchMoviesByQuery';\nimport { useSearchParams } from 'react-router-dom';\nimport { Movies } from 'components/Parts.styled';\n\nconst MoviesPage = () => {\n  const [error, setError] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [findedMovies, setFindedMovies] = useState(null);\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const [searchParams] = useSearchParams();\n  const query = searchParams.get('search');\n  const ref = useRef(query);\n\n  const submit = value => {\n    setSearchQuery(value);\n  };\n\n  const fetchByQuery = useCallback(async dataForSearch => {\n    try {\n      setIsLoading(true);\n      setFindedMovies(null);\n      const data = await serchMoviesByQuery(dataForSearch);\n      setFindedMovies(data.results);\n    } catch (error) {\n      setError(error.response.data);\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  //\n  useEffect(() => {\n    searchQuery && fetchByQuery(searchQuery);\n  }, [fetchByQuery, searchQuery]);\n\n  useEffect(() => {\n    ref.current && fetchByQuery(ref.current);\n  }, [fetchByQuery]);\n\n  return (\n    <Movies>\n      <SearchForm submit={submit}></SearchForm>\n      {isLoading && 'Loading...'}\n      {error && error.message}\n      {findedMovies &&\n        (!findedMovies.length ? (\n          <h1>No data found</h1>\n        ) : (\n          <MoviesList data={findedMovies} />\n        ))}\n    </Movies>\n  );\n};\n\nexport default MoviesPage;\n"],"names":["submit","useSearchParams","searchParams","setSearchParams","queryByParams","get","onSubmit","e","preventDefault","name","type","onChange","value","target","search","id","placeholder","required","params","URLSearchParams","include_adult","language","page","serchMoviesByQuery","searchQuery","axios","headers","accept","Authorization","data","useState","error","setError","isLoading","setIsLoading","findedMovies","setFindedMovies","setSearchQuery","query","ref","useRef","fetchByQuery","useCallback","dataForSearch","results","response","useEffect","current","message","length","MoviesList"],"sourceRoot":""}